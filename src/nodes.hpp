#ifndef ALE_SOLVER_SRC_GAUSS_HPP_
#define ALE_SOLVER_SRC_GAUSS_HPP_

#include <array>
#include <cassert>
#include <functional>

constexpr size_t legendreOrderMax = 6;
constexpr size_t lobattoOrderMax = 6;
constexpr std::array<double,
                     legendreOrderMax *(legendreOrderMax + 1) / 2>
    legendreAbscissas{0.5,                               // 1st order
                      0.5 * (1.0 - 0.5773502691896257),  // 2
                      0.5 * (1.0 + 0.5773502691896257),
                      0.5 * (1.0 - 0.7745966692414834),  // 3
                      0.5,
                      0.5 * (1.0 + 0.7745966692414834),
                      0.5 * (1.0 - 0.8611363115940526),  // 4
                      0.5 * (1.0 - 0.3399810435848563),
                      0.5 * (1.0 + 0.3399810435848563),
                      0.5 * (1.0 + 0.8611363115940526),
                      0.5 * (1.0 - 0.9061798459386640),  // 5
                      0.5 * (1.0 - 0.5384693101056831),
                      0.5,
                      0.5 * (1.0 + 0.5384693101056831),
                      0.5 * (1.0 + 0.9061798459386640),
                      0.5 * (1.0 - 0.9324695142031521),  // 6
                      0.5 * (1.0 - 0.6612093864662645),
                      0.5 * (1.0 - 0.2386191860831969),
                      0.5 * (1.0 + 0.2386191860831969),
                      0.5 * (1.0 + 0.6612093864662645),
                      0.5 * (1.0 + 0.9324695142031521)};
constexpr std::array<double,
                     legendreOrderMax *(legendreOrderMax + 1) / 2>
    legendreWeights{1.0,  // 1
                    0.5,  // 2
                    0.5,
                    0.5 * 0.5555555555555556,  // 3
                    0.5 * 0.8888888888888888,
                    0.5 * 0.5555555555555556,
                    0.5 * 0.3478548451374538,  // 4
                    0.5 * 0.6521451548625461,
                    0.5 * 0.6521451548625461,
                    0.5 * 0.3478548451374538,
                    0.5 * 0.2369268850561891,  // 5
                    0.5 * 0.4786286704993665,
                    0.5 * 0.5688888888888889,
                    0.5 * 0.4786286704993665,
                    0.5 * 0.2369268850561891,
                    0.5 * 0.1713244923791704,  // 6
                    0.5 * 0.3607615730481386,
                    0.5 * 0.4679139345726910,
                    0.5 * 0.4679139345726910,
                    0.5 * 0.3607615730481386,
                    0.5 * 0.1713244923791704};
constexpr std::array<double,
                     lobattoOrderMax *(lobattoOrderMax + 3) / 2>
    lobattoAbscissas{0.0,  // 1
                     1.0,
                     0.0,  // 2
                     0.5,
                     1.0,
                     0.0,  // 3
                     0.5 * (1.0 - 0.44721359549995793928),
                     0.5 * (1.0 + 0.44921359549995793928),
                     1.0,
                     0.0,  // 4
                     0.5 * (1.0 - 0.65465367070797714380),
                     0.5,
                     0.5 * (1.0 + 0.65465367070797714380),
                     1.0,
                     0.0,  // 5
                     0.5 * (1.0 - 0.76505532392946469285),
                     0.5 * (1.0 - 0.28523151648064509631),
                     0.5 * (1.0 + 0.28523151648064509631),
                     0.5 * (1.0 + 0.76505532392946469285),
                     1.0,
                     0.0,  // 6
                     0.5 * (1.0 - 0.83022389627856692987),
                     0.5 * (1.0 - 0.46884879347071421380),
                     0.5,
                     0.5 * (1.0 + 0.46884879347071421380),
                     0.5 * (1.0 + 0.83022389627856692987),
                     1.0};

inline size_t getLegendreStartIndex(size_t order) {
  assert(order > 0 && order <= legendreOrderMax);
  return (order - 1) * order / 2;
}
inline size_t getLobattoStartIndex(size_t order) {
  assert(order > 0 && order <= lobattoOrderMax);
  return (order - 1) * (order + 2) / 2;
}

double lobattoBasis1D(double x, size_t order, size_t k);
double lobattoBasis1Ddx(double x, size_t order, size_t k);
double legendreBasis1D(double x, size_t order, size_t k);

#endif
