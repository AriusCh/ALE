#ifndef ALE_SOLVER_SRC_NODES_HPP_
#define ALE_SOLVER_SRC_NODES_HPP_

#include <array>
#include <cassert>
#include <cstddef>

constexpr size_t legendreOrderMax = 16;
constexpr size_t lobattoOrderMax = 8;
constexpr std::array<double,
                     legendreOrderMax *(legendreOrderMax + 1) / 2>
    legendreAbscissas{
        0.5,                               // 1st order
        0.5 * (1.0 - 0.5773502691896257),  // 2
        0.5 * (1.0 + 0.5773502691896257),
        0.5 * (1.0 - 0.7745966692414834),  // 3
        0.5,
        0.5 * (1.0 + 0.7745966692414834),
        0.5 * (1.0 - 0.8611363115940526),  // 4
        0.5 * (1.0 - 0.3399810435848563),
        0.5 * (1.0 + 0.3399810435848563),
        0.5 * (1.0 + 0.8611363115940526),
        0.5 * (1.0 - 0.9061798459386640),  // 5
        0.5 * (1.0 - 0.5384693101056831),
        0.5,
        0.5 * (1.0 + 0.5384693101056831),
        0.5 * (1.0 + 0.9061798459386640),
        0.5 * (1.0 - 0.9324695142031521),  // 6
        0.5 * (1.0 - 0.6612093864662645),
        0.5 * (1.0 - 0.2386191860831969),
        0.5 * (1.0 + 0.2386191860831969),
        0.5 * (1.0 + 0.6612093864662645),
        0.5 * (1.0 + 0.9324695142031521),
        0.5 * (1.0 - 0.9491079123427585),  // 7
        0.5 * (1.0 - 0.7415311855993945),
        0.5 * (1.0 - 0.4058451513773972),
        0.5,
        0.5 * (1.0 + 0.4058451513773972),
        0.5 * (1.0 + 0.7415311855993945),
        0.5 * (1.0 + 0.9491079123427585),
        0.5 * (1.0 - 0.9602898564975363),  // 8
        0.5 * (1.0 - 0.7966664774136267),
        0.5 * (1.0 - 0.5255324099163290),
        0.5 * (1.0 - 0.1834346424956498),
        0.5 * (1.0 + 0.1834346424956498),
        0.5 * (1.0 + 0.5255324099163290),
        0.5 * (1.0 + 0.7966664774136267),
        0.5 * (1.0 + 0.9602898564975363),
        0.5 * (1.0 - 0.9681602395076261),  // 9
        0.5 * (1.0 - 0.8360311073266358),
        0.5 * (1.0 - 0.6133714327005904),
        0.5 * (1.0 - 0.3242534234038089),
        0.5,
        0.5 * (1.0 + 0.3242534234038089),
        0.5 * (1.0 + 0.6133714327005904),
        0.5 * (1.0 + 0.8360311073266358),
        0.5 * (1.0 + 0.9681602395076261),
        0.5 * (1.0 - 0.9739065285171717),  // 10
        0.5 * (1.0 - 0.8650633666889845),
        0.5 * (1.0 - 0.6794095682990244),
        0.5 * (1.0 - 0.4333953941292472),
        0.5 * (1.0 - 0.1488743389816312),
        0.5 * (1.0 + 0.1488743389816312),
        0.5 * (1.0 + 0.4333953941292472),
        0.5 * (1.0 + 0.6794095682990244),
        0.5 * (1.0 + 0.8650633666889845),
        0.5 * (1.0 + 0.9739065285171717),
        0.5 * (1.0 - 0.9782286581460570),  // 11
        0.5 * (1.0 - 0.8870625997680953),
        0.5 * (1.0 - 0.7301520055740494),
        0.5 * (1.0 - 0.5190961292068118),
        0.5 * (1.0 - 0.2695431559523450),
        0.5,
        0.5 * (1.0 + 0.2695431559523450),
        0.5 * (1.0 + 0.5190961292068118),
        0.5 * (1.0 + 0.7301520055740494),
        0.5 * (1.0 + 0.8870625997680953),
        0.5 * (1.0 + 0.9782286581460570),
        0.5 * (1.0 - 0.9815606342467192),  // 12
        0.5 * (1.0 - 0.9041172563704749),
        0.5 * (1.0 - 0.7699026741943047),
        0.5 * (1.0 - 0.5873179542866175),
        0.5 * (1.0 - 0.3678314989981802),
        0.5 * (1.0 - 0.1252334085114689),
        0.5 * (1.0 + 0.1252334085114689),
        0.5 * (1.0 + 0.3678314989981802),
        0.5 * (1.0 + 0.5873179542866175),
        0.5 * (1.0 + 0.7699026741943047),
        0.5 * (1.0 + 0.9041172563704749),
        0.5 * (1.0 + 0.9815606342467192),
        0.5 * (1.0 - 0.9841830547185881),  // 13
        0.5 * (1.0 - 0.9175983992229779),
        0.5 * (1.0 - 0.8015780907333099),
        0.5 * (1.0 - 0.6423493394403402),
        0.5 * (1.0 - 0.4484927510364469),
        0.5 * (1.0 - 0.2304583159551348),
        0.5,
        0.5 * (1.0 + 0.2304583159551348),
        0.5 * (1.0 + 0.4484927510364469),
        0.5 * (1.0 + 0.6423493394403402),
        0.5 * (1.0 + 0.8015780907333099),
        0.5 * (1.0 + 0.9175983992229779),
        0.5 * (1.0 + 0.9841830547185881),
        0.5 * (1.0 - 0.9862838086968123),  // 14
        0.5 * (1.0 - 0.9284348836635735),
        0.5 * (1.0 - 0.8272013150697650),
        0.5 * (1.0 - 0.6872929048116855),
        0.5 * (1.0 - 0.5152486363581541),
        0.5 * (1.0 - 0.3191123689278897),
        0.5 * (1.0 - 0.1080549487073437),
        0.5 * (1.0 + 0.1080549487073437),
        0.5 * (1.0 + 0.3191123689278897),
        0.5 * (1.0 + 0.5152486363581541),
        0.5 * (1.0 + 0.6872929048116855),
        0.5 * (1.0 + 0.8272013150697650),
        0.5 * (1.0 + 0.9284348836635735),
        0.5 * (1.0 + 0.9862838086968123),
        0.5 * (1.0 - 0.9879925180204854),  // 15
        0.5 * (1.0 - 0.9372733924007060),
        0.5 * (1.0 - 0.8482065834104272),
        0.5 * (1.0 - 0.7244177313601701),
        0.5 * (1.0 - 0.5709721726085388),
        0.5 * (1.0 - 0.3941513470775634),
        0.5 * (1.0 - 0.2011940939974345),
        0.5,
        0.5 * (1.0 + 0.2011940939974345),
        0.5 * (1.0 + 0.3941513470775634),
        0.5 * (1.0 + 0.5709721726085388),
        0.5 * (1.0 + 0.7244177313601701),
        0.5 * (1.0 + 0.8482065834104272),
        0.5 * (1.0 + 0.9372733924007060),
        0.5 * (1.0 + 0.9879925180204854),
        0.5 * (1.0 - 0.9894009349916499),  // 16
        0.5 * (1.0 - 0.9445750230732326),
        0.5 * (1.0 - 0.8656312023878318),
        0.5 * (1.0 - 0.7554044083550030),
        0.5 * (1.0 - 0.6178762444026438),
        0.5 * (1.0 - 0.4580167776572274),
        0.5 * (1.0 - 0.2816035507792589),
        0.5 * (1.0 - 0.0950125098376374),
        0.5 * (1.0 + 0.0950125098376374),
        0.5 * (1.0 + 0.2816035507792589),
        0.5 * (1.0 + 0.4580167776572274),
        0.5 * (1.0 + 0.6178762444026438),
        0.5 * (1.0 + 0.7554044083550030),
        0.5 * (1.0 + 0.8656312023878318),
        0.5 * (1.0 + 0.9445750230732326),
        0.5 * (1.0 + 0.9894009349916499),

    };
constexpr std::array<double,
                     legendreOrderMax *(legendreOrderMax + 1) / 2>
    legendreWeights{
        1.0,  // 1
        0.5,  // 2
        0.5,
        0.5 * 0.5555555555555556,  // 3
        0.5 * 0.8888888888888888,
        0.5 * 0.5555555555555556,
        0.5 * 0.3478548451374538,  // 4
        0.5 * 0.6521451548625461,
        0.5 * 0.6521451548625461,
        0.5 * 0.3478548451374538,
        0.5 * 0.2369268850561891,  // 5
        0.5 * 0.4786286704993665,
        0.5 * 0.5688888888888889,
        0.5 * 0.4786286704993665,
        0.5 * 0.2369268850561891,
        0.5 * 0.1713244923791704,  // 6
        0.5 * 0.3607615730481386,
        0.5 * 0.4679139345726910,
        0.5 * 0.4679139345726910,
        0.5 * 0.3607615730481386,
        0.5 * 0.1713244923791704,
        0.5 * 0.1294849661688697,  // 7
        0.5 * 0.2797053914892766,
        0.5 * 0.3818300505051189,
        0.5 * 0.4179591836734694,
        0.5 * 0.3818300505051189,
        0.5 * 0.2797053914892766,
        0.5 * 0.1294849661688697,
        0.5 * 0.1012285362903763,  // 8
        0.5 * 0.2223810344533745,
        0.5 * 0.3137066458778873,
        0.5 * 0.3626837833783620,
        0.5 * 0.3626837833783620,
        0.5 * 0.3137066458778873,
        0.5 * 0.2223810344533745,
        0.5 * 0.1012285362903763,
        0.5 * 0.0812743883615744,  // 9
        0.5 * 0.1806481606948574,
        0.5 * 0.2606106964029354,
        0.5 * 0.3123470770400029,
        0.5 * 0.3302393550012598,
        0.5 * 0.3123470770400029,
        0.5 * 0.2606106964029354,
        0.5 * 0.1806481606948574,
        0.5 * 0.0812743883615744,
        0.5 * 0.0666713443086881,  // 10
        0.5 * 0.1494513491505806,
        0.5 * 0.2190863625159820,
        0.5 * 0.2692667193099963,
        0.5 * 0.2955242247147529,
        0.5 * 0.2955242247147529,
        0.5 * 0.2692667193099963,
        0.5 * 0.2190863625159820,
        0.5 * 0.1494513491505806,
        0.5 * 0.0666713443086881,
        0.5 * 0.0556685671161737,  // 11
        0.5 * 0.1255803694649046,
        0.5 * 0.1862902109277343,
        0.5 * 0.2331937645919905,
        0.5 * 0.2628045445102467,
        0.5 * 0.2729250867779006,
        0.5 * 0.2628045445102467,
        0.5 * 0.2331937645919905,
        0.5 * 0.1862902109277343,
        0.5 * 0.1255803694649046,
        0.5 * 0.0556685671161737,
        0.5 * 0.0471753363865118,  // 12
        0.5 * 0.1069393259953184,
        0.5 * 0.1600783285433462,
        0.5 * 0.2031674267230659,
        0.5 * 0.2334925365383548,
        0.5 * 0.2491470458134028,
        0.5 * 0.2491470458134028,
        0.5 * 0.2334925365383548,
        0.5 * 0.2031674267230659,
        0.5 * 0.1600783285433462,
        0.5 * 0.1069393259953184,
        0.5 * 0.0471753363865118,
        0.5 * 0.0404840047653159,  // 13
        0.5 * 0.0921214998377285,
        0.5 * 0.1388735102197872,
        0.5 * 0.1781459807619457,
        0.5 * 0.2078160475368885,
        0.5 * 0.2262831802628972,
        0.5 * 0.2325515532308739,
        0.5 * 0.2262831802628972,
        0.5 * 0.2078160475368885,
        0.5 * 0.1781459807619457,
        0.5 * 0.1388735102197872,
        0.5 * 0.0921214998377285,
        0.5 * 0.0404840047653159,
        0.5 * 0.0351194603317519,  // 14
        0.5 * 0.0801580871597602,
        0.5 * 0.1215185706879032,
        0.5 * 0.1572031671581935,
        0.5 * 0.1855383974779378,
        0.5 * 0.2051984637212956,
        0.5 * 0.2152638534631578,
        0.5 * 0.2152638534631578,
        0.5 * 0.2051984637212956,
        0.5 * 0.1855383974779378,
        0.5 * 0.1572031671581935,
        0.5 * 0.1215185706879032,
        0.5 * 0.0801580871597602,
        0.5 * 0.0351194603317519,
        0.5 * 0.0307532419961173,  // 15
        0.5 * 0.0703660474881081,
        0.5 * 0.1071592204671719,
        0.5 * 0.1395706779261543,
        0.5 * 0.1662692058169939,
        0.5 * 0.1861610000155622,
        0.5 * 0.1984314853271116,
        0.5 * 0.2025782419255613,
        0.5 * 0.1984314853271116,
        0.5 * 0.1861610000155622,
        0.5 * 0.1662692058169939,
        0.5 * 0.1395706779261543,
        0.5 * 0.1071592204671719,
        0.5 * 0.0703660474881081,
        0.5 * 0.0307532419961173,
        0.5 * 0.0271524594117541,  // 16
        0.5 * 0.0622535239386479,
        0.5 * 0.0951585116824928,
        0.5 * 0.1246289712555339,
        0.5 * 0.1495959888165767,
        0.5 * 0.1691565193950025,
        0.5 * 0.1826034150449236,
        0.5 * 0.1894506104550685,
        0.5 * 0.1894506104550685,
        0.5 * 0.1826034150449236,
        0.5 * 0.1691565193950025,
        0.5 * 0.1495959888165767,
        0.5 * 0.1246289712555339,
        0.5 * 0.0951585116824928,
        0.5 * 0.0622535239386479,
        0.5 * 0.0271524594117541,

    };
constexpr std::array<double,
                     lobattoOrderMax *(lobattoOrderMax + 3) / 2>
    lobattoAbscissas{
        0.0,  // 1
        1.0,
        0.0,  // 2
        0.5,
        1.0,
        0.0,  // 3
        0.5 * (1.0 - 0.44721359549995793928),
        0.5 * (1.0 + 0.44921359549995793928),
        1.0,
        0.0,  // 4
        0.5 * (1.0 - 0.65465367070797714380),
        0.5,
        0.5 * (1.0 + 0.65465367070797714380),
        1.0,
        0.0,  // 5
        0.5 * (1.0 - 0.76505532392946469285),
        0.5 * (1.0 - 0.28523151648064509631),
        0.5 * (1.0 + 0.28523151648064509631),
        0.5 * (1.0 + 0.76505532392946469285),
        1.0,
        0.0,  // 6
        0.5 * (1.0 - 0.83022389627856692987),
        0.5 * (1.0 - 0.46884879347071421380),
        0.5,
        0.5 * (1.0 + 0.46884879347071421380),
        0.5 * (1.0 + 0.83022389627856692987),
        1.0,
        0.0,  // 7
        0.5 * (1.0 - 0.87174014850960661534),
        0.5 * (1.0 - 0.59170018143314230214),
        0.5 * (1.0 - 0.20929921790247886877),
        0.5 * (1.0 + 0.20929921790247886877),
        0.5 * (1.0 + 0.59170018143314230214),
        0.5 * (1.0 + 0.87174014850960661534),
        1.0,
        0.0,  // 8
        0.5 * (1.0 - 0.89975799541146015731),
        0.5 * (1.0 - 0.67718627951073775345),
        0.5 * (1.0 - 0.36311746382617815871),
        0.5,
        0.5 * (1.0 + 0.36311746382617815871),
        0.5 * (1.0 + 0.67718627951073775345),
        0.5 * (1.0 + 0.89975799541146015731),
        1.0,

    };

inline size_t getLegendreStartIndex(size_t order) {
  assert(order > 0 && order <= legendreOrderMax);
  return (order - 1) * order / 2;
}
inline size_t getLobattoStartIndex(size_t order) {
  assert(order > 0 && order <= lobattoOrderMax);
  return (order - 1) * (order + 2) / 2;
}

double lobattoBasis1D(double x, size_t order, size_t k);
double lobattoBasis1Ddx(double x, size_t order, size_t k);
double legendreBasis1D(double x, size_t order, size_t k);
double bernsteinBasis1D(double x, size_t order, size_t k);
double bernsteinBasis1Ddx(double x, size_t order, size_t k);

#endif
